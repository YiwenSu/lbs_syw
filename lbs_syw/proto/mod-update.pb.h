// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mod-update.proto

#ifndef PROTOBUF_mod_2dupdate_2eproto__INCLUDED
#define PROTOBUF_mod_2dupdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mod {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mod_2dupdate_2eproto();
void protobuf_AssignDesc_mod_2dupdate_2eproto();
void protobuf_ShutdownFile_mod_2dupdate_2eproto();

class ModUpdateRequest;

// ===================================================================

class ModUpdateRequest : public ::google::protobuf::Message {
 public:
  ModUpdateRequest();
  virtual ~ModUpdateRequest();

  ModUpdateRequest(const ModUpdateRequest& from);

  inline ModUpdateRequest& operator=(const ModUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModUpdateRequest& default_instance();

  void Swap(ModUpdateRequest* other);

  // implements Message ----------------------------------------------

  ModUpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModUpdateRequest& from);
  void MergeFrom(const ModUpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional double lon = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 2;
  inline double lon() const;
  inline void set_lon(double value);

  // optional double lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline double lat() const;
  inline void set_lat(double value);

  // optional double speed = 4;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 4;
  inline double speed() const;
  inline void set_speed(double value);

  // optional int64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:mod.ModUpdateRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  double lon_;
  double lat_;
  double speed_;
  ::google::protobuf::int64 timestamp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_mod_2dupdate_2eproto();
  friend void protobuf_AssignDesc_mod_2dupdate_2eproto();
  friend void protobuf_ShutdownFile_mod_2dupdate_2eproto();

  void InitAsDefaultInstance();
  static ModUpdateRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ModUpdateRequest

// required string id = 1;
inline bool ModUpdateRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModUpdateRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModUpdateRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModUpdateRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& ModUpdateRequest::id() const {
  return *id_;
}
inline void ModUpdateRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ModUpdateRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void ModUpdateRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModUpdateRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* ModUpdateRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModUpdateRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double lon = 2;
inline bool ModUpdateRequest::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModUpdateRequest::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModUpdateRequest::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModUpdateRequest::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double ModUpdateRequest::lon() const {
  return lon_;
}
inline void ModUpdateRequest::set_lon(double value) {
  set_has_lon();
  lon_ = value;
}

// optional double lat = 3;
inline bool ModUpdateRequest::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModUpdateRequest::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModUpdateRequest::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModUpdateRequest::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double ModUpdateRequest::lat() const {
  return lat_;
}
inline void ModUpdateRequest::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// optional double speed = 4;
inline bool ModUpdateRequest::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModUpdateRequest::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModUpdateRequest::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModUpdateRequest::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double ModUpdateRequest::speed() const {
  return speed_;
}
inline void ModUpdateRequest::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}

// optional int64 timestamp = 5;
inline bool ModUpdateRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModUpdateRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModUpdateRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModUpdateRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ModUpdateRequest::timestamp() const {
  return timestamp_;
}
inline void ModUpdateRequest::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mod

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mod_2dupdate_2eproto__INCLUDED
